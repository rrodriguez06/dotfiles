#+TITLE:Emacs Config
#+AUTHOR: RODRIGUEZ Romain
#+DESCRIPTION: My personnal Emacs config.
#+STARTUP: showeverything
#+OPTIONS: toc:3

* TABLE OF CONTENT :toc:
- [[#important-programs-to-load-first][IMPORTANT PROGRAMS TO LOAD FIRST]]
  - [[#adding-script-directory-to-path][Adding Script Directory to Path]]
  - [[#sourcing-the-scripts][Sourcing the scripts]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
  - [[#native-settings][Native settings]]
- [[#autopair][AUTOPAIR]]
- [[#all-the-icons][ALL THE ICONS]]
- [[#backup][BACKUP]]
- [[#code-completion-snippets-and-linting][CODE COMPLETION, SNIPPETS AND LINTING]]
  - [[#lsp][LSP]]
  - [[#company--helm][Company & Helm]]
  - [[#flycheck][Flycheck]]
  - [[#yasnippets][Yasnippets]]
  - [[#treesitter][TreeSitter]]
- [[#dashboard][DASHBOARD]]
- [[#dired][DIRED]]
- [[#diminish][DIMINISH]]
- [[#fonts][FONTS]]
  - [[#setting-up-font-face][Setting Up Font Face]]
  - [[#enable-firacode-ligatures][Enable FiraCode Ligatures]]
  - [[#zooming-inout][Zooming In/Out]]
- [[#git-blame][GIT-BLAME]]
- [[#git-gutter][GIT-GUTTER]]
- [[#hideshow-minor-mode][HIDE/SHOW MINOR MODE]]
- [[#graphical-user-interface-tweaks][GRAPHICAL USER INTERFACE TWEAKS]]
  - [[#disabling-menubar-toolbar-and-scrollbar][Disabling Menubar, Toolbar and Scrollbar]]
  - [[#display-line-numbers-and-truncate-lines][Display Line Numbers and Truncate Lines]]
  - [[#setting-up-monokai-theme][Setting up Monokai theme]]
  - [[#rainbow-parenthesis][Rainbow Parenthesis]]
- [[#ivy-counsel][IVY (COUNSEL)]]
- [[#mac-specific-options][MAC SPECIFIC OPTIONS]]
- [[#magit][MAGIT]]
- [[#modeline][MODELINE]]
- [[#neotree][NEOTREE]]
- [[#org-mode][ORG MODE]]
  - [[#enabling-table-of-content][Enabling Table of Content]]
  - [[#enable-org-bullets][Enable Org Bullets]]
  - [[#disable-electric-indent][Disable Electric Indent]]
  - [[#enable-org-tempo][Enable Org Tempo]]
  - [[#enable-org-auto-tangle][Enable Org Auto-Tangle]]
- [[#projectile][PROJECTILE]]
- [[#rainbow-mode][RAINBOW MODE]]
- [[#rainbow-delimiters][RAINBOW DELIMITERS]]
- [[#reload-emacs][RELOAD EMACS]]
- [[#restclient][RESTCLIENT]]
- [[#shells-and-terminals][SHELLS AND TERMINALS]]
  - [[#eshell][Eshell]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-Toggle]]
- [[#sudo-edit][SUDO EDIT]]
- [[#which-key][WHICH-KEY]]

* IMPORTANT PROGRAMS TO LOAD FIRST
** Adding Script Directory to Path

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.config/emacs/scripts/")
#+end_src

** Sourcing the scripts
#+begin_src emacs-lisp
(require 'elpaca-setup)
(require 'buffer-move)
#+end_src

** Load Evil Mode

#+begin_src emacs-lisp
(use-package evil
  :init
  (setq evil-want-integration t)
  (setq evil-want-keybinding nil)
  (setq evil-vsplit-window-right t)
  (setq evil-split-window-below t)
  (evil-mode))

(use-package evil-collection
  :after evil
  :config
  (setq evil-collection-mode-list '(dashboard dired ibuffer))
  (evil-collection-init))

(use-package evil-tutor)
#+end_src

** General Keybindings

#+begin_src emacs-lisp
(use-package general
  :config
  (general-evil-setup)
  ;; set up ',' as the default leader key
  (general-create-definer rr/leader-keys
    :states '(normal insert visual emacs)
    :keymaps 'override
    :prefix "," ;; set leader
    :global-prefix "M-,")

  (rr/leader-keys
    "," '(counsel-M-x :wk "Counsel M-x")
    "." '(find-file :wk "Find File")
    "f c" '((lambda () (interactive) (find-file "/Users/rromain/.config/emacs/config.org")) :wk "Edit emacs config")
    "f r" '(counsel-recentf :wk "Find recent files")
    "TAB TAB" '(comment-line :wk "Comment lines"))

  (rr/leader-keys
    "b" '(:ignore t :wk "Bookmarks/Buffers")
    "b b" '(switch-to-buffer :wk "Switch buffer")
    "b d" '(bookmark-delete :wk "Delete bookmark")
    "b i" '(ibuffer :wk "IBuffer")
    "b k" '(kill-this-buffer :wk "Kill this buffer")
    "b K" '(kill-some-buffers :wk "Kill multiple buffers")
    "b l" '(list-bookmarks :wk "List bookmarks")
    "b m" '(bookmark-set :wk "Set bookmark")
    "b n" '(next-buffer :wk "Next buffer")
    "b p" '(previous-buffer :wk "Previous buffer")
    "b r" '(revert-buffer :wk "Reload buffer")
    "b R" '(rename-buffer :wk "Rename buffer")
    "b s" '(basic-save-buffer :wk "Save buffer")
    "b S" '(save-some-buffers :wk "Save multiple buffers")
    "b w" '(bookmark-save :wk "Save current bookmark to bookmarks file"))

  (rr/leader-keys
    "d" '(:ignore t :wk "Dired")
    "d d" '(dired :wk "Open Dired")
    "d j" '(dired-jump :wk "Dired jump to current")
    "d n" '(neotree-dir :wk "Open directory in neotree")
    "d p" '(peep-dired :wk "Peep-dired"))

  (rr/leader-keys
    "e" '(:ignore t :wk "Eshell/Evaluate")
    "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
    "e d" '(eval-defun :wk "Evaluate defun containing or after point")
    "e e" '(eval-expression :wk "Evaluate and elisp expression")
    "e h" '(counsel-esh-history :wk "Eshell history")
    "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
    "e r" '(eval-region :wk "Evaluate elisp in region")
    "e s" '(eshell :wk "Eshell"))

  (rr/leader-keys
    "h" '(:ignore t :wk "Help")
    "h a" '(counsel-apropos :wk "Apropos")
    "h b" '(describe-bindings :wk "Describe bindings")
    "h c" '(describe-char :wk "Describe character under cursor")
    "h d" '(:ignore t :wk "Emacs documentation")
    "h d a" '(about-emacs :wk "About Emacs")
    "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
    "h d m" '(view-emacs-manual :wk "View Emacs manual")
    "h d p" '(view-emacs-problems :wk "View Emacs problems")
    "h d t" '(view-emacs-todo :wk "View Emacs todo")
    "h f" '(describe-function :wk "Describe function")
    "h L" '(describe-language-environment :wk "Describe language environment")
    "h m" '(describe-mode :wk "Describe mode")
    "h r" '(:ignore t :wk "Reload")
    "h r r" '((lambda () (interactive)
                (load-file "~/.config/emacs/init.el")
                (ignore (elpaca-process-queues)))
              :wk "Reload emacs config")
    "h t" '(load-theme :wk "Load theme")
    "h v" '(describe-variable :wk "Describe variable")
    "h x" '(describe-command :wk "Display full documentation for command"))

  (rr/leader-keys
    "t" '(:ignore t :wk "Toggle")
    ;; "t e" '(eshell-toggle :wk "Toggle eshell")
    "t f" '(flycheck-mode :wk "Toggle flycheck")
    "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
    "t n" '(neotree-toggle :wk "Toggle neotree")
    "t t" '(visual-line-mode :wk "Toggle truncated lines")
    "t v" '(vterm-toggle :wk "Toggle vterm"))

  (rr/leader-keys
    "w" '(:ignore t :wk "Windows")
    ;; Window splits
    "w c" '(evil-window-delete :wk "Close window")
    "w n" '(evil-window-new :wk "New window")
    "w s" '(evil-window-split :wk "Horizontal split window")
    "w v" '(evil-window-vsplit :wk "Vertical split window")
    ;; Window motions
    "w j" '(evil-window-left :wk "Window left")
    "w k" '(evil-window-down :wk "Window down")
    "w i" '(evil-window-up :wk "Window up")
    "w l" '(evil-window-right :wk "Window right")
    "w p" '(evil-window-prev :wk "Goto prev window")
    "w w" '(evil-window-next :wk "Goto next window")
    ;; Move Windows
    "w J" '(buf-move-left :wk "Buffer move left")
    "w K" '(buf-move-down :wk "Buffer move down")
    "w I" '(buf-move-up :wk "Buffer move up")
    "w L" '(buf-move-right :wk "Buffer move right"))

  (rr/leader-keys
    "m" '(:ignore t :wk "Org")
    "m a" '(org-agenda :wk "Org agenda")
    "m e" '(org-export-dispatch :wk "Org export dispatch")
    "m i" '(org-toggle-item :wk "Org toggle item")
    "m B" '(org-babel-tangle :wk "Org babel tangle")
    "m T" '(org-todo-list :wk "Org todo list"))

  (rr/leader-keys
    "m t" '(:ignore t :wk "Org Table")
    "m t t" '(org-table-create :wk "Org table")
    "m t -" '(org-table-insert-hline :wk "Insert hline in table"))

  (rr/leader-keys
    "m d" '(:ignore t :wk "Org Date/Deadline")
    "m d t" '(org-time-stamp :wk "Org time stamp"))

  (rr/leader-keys
    "p" '(projectile-command-map :wk "Projectile"))

  (rr/leader-keys
    "l" '(:ignore t :wk "LSP")
    "l l" '(lsp-command-map :wk "LSP command map")
    "l d" '(lsp-ui-peek-find-definitions :wk "Goto definition")
    "l r" '(lsp-ui-peek-find-references :wk "Find all references")
    "l a" '(lsp-execute-code-action :wk "Execute code action")
    "l i" '(:ignore t :wk "IMenu")
    "l i i" '(lsp-ui-imenu :wk "Open imenu")
    "l i k" '(lsp-ui-imenu--kill :wk "Kill imenu"))

  (rr/leader-keys
    "s" '(:ignore t :wk "Snippets")
    "s s" '(yas-insert-snippet :wk "Insert snippet")
    "s e" '(yas-visit-snippet-file :wk "Edit snippet"))

  (rr/leader-keys
    "c" '(:ignore t :wk "Compile")
    "c c" '(compile :wk "Compile project"))

  (rr/leader-keys
    "v" '(:ignore t :wk "Visibility")
    "v h" '(hs-hide-block :wk "Hide block")
    "v s" '(hs-show-block :wk "Show block"))

  (rr/leader-keys
    "g" '(:ignore t :wk "GIT")
    "g g" '(magit :wk "Open Magit")
    "g b" '(blamer-show-posframe-commit-info :wk "Show git blame in postframe"))
  )
#+end_src

** Native settings
#+begin_src emacs-lisp
(setq pixel-scroll-precision-mode t)
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)
(setq indent-line-function 'insert-tab)
(setq c-default-style "linux") 
(setq c-basic-offset 4) 
(c-set-offset 'comment-intro 0)
#+end_src

* AUTOPAIR
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.config/emacs/autopair")
(require 'autopair)
(autopair-global-mode)
#+end_src

* ALL THE ICONS
Icon set that can be used with plenty of Emacs programs.
#+begin_src emacs-lisp
(use-package all-the-icons
  :ensure t
  :if (display-graphic-p))

(use-package all-the-icons-dired
  :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* BACKUP
Emacs create automatic backup of files in their original directories (adding ~ to the end of filename).
Let's tell emacs to put backup files in the =TRASH= directory.
#+begin_src emacs-lisp
(setq backup-directory-alist '((".*" . "~/.Trash")))
#+end_src

* CODE COMPLETION, SNIPPETS AND LINTING
** LSP
*** Configurations
#+begin_src emacs-lisp
(use-package lsp-mode
  :hook (prog-mode . lsp)
  :commands lsp)

(use-package lsp-ui
  :after lsp-mode
  :commands lsp-ui-mode)

(use-package helm-lsp
  :after (helm lsp-mode)
  :commands helm-lsp-workspace-symbol)
#+end_src

*** Languages
#+begin_src emacs-lisp
(use-package lsp-java
 :after lsp-mode)
(add-hook 'java-mode-hook #'lsp)

(use-package rust-mode)

(use-package typescript-mode)

(use-package python-mode)
#+end_src

** Company & Helm
#+begin_src emacs-lisp
(use-package company
  :config
    (setq company-idle-delay 0
          company-minimum-prefix-length 1
          company-tooltip-maximum-width 70)
    (global-company-mode 1))

(use-package company-jedi
  :after company
  :ensure t)

(use-package helm
  :config
    (helm-mode 1))

(setq lsp-completion-provider :capf)
#+end_src

** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
  :init (global-flycheck-mode))

(add-hook 'lsp-after-initialize-hook 'lsp-enable-imenu)
(add-hook 'lsp-after-initialize-hook 'flycheck-mode)
#+end_src

** Yasnippets
#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :config
    (yas-reload-all)
    (yas-global-mode 1)
  :hook
    (prog-mode . yas-minor-mode)
    (text-mode . yas-minor-mode))

(use-package yasnippet-snippets)
#+end_src

** TreeSitter
#+begin_src emacs-lisp
(use-package tree-sitter
  :ensure t
  :config
    (global-tree-sitter-mode)
  :hook (tree-sitter-after-on . tree-sitter-hl-mode))

(use-package tree-sitter-langs
  :ensure t
  :after tree-sitter)
#+end_src

* DASHBOARD
Emacs Dashboard is an extensible start screen.
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-banner-logo-title "WELCOME TO EMACS !")
  (setq dashboard-startup-banner 'logo)
  ;;(setq dashboard-startup-banner "path/to/image.png")
  (setq dashboard-center-content t)
  (setq dashboard-items '((recents . 5)
                          (agenda . 5)
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  ;; (dashboard-modify-heading-icons '((recents . "file-text")
  ;; (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))
#+end_src

* DIRED
dired-open allow to select app in where to launch specific file format.
#+begin_src emacs-lisp
;; (use-package dired-open
;;   :config
;;   (setq dired-open-extensions '(("gif" . "sxiv")
;;                                 ("jpg" . "sxiv")
;;                                 ("png" . "sxiv")
;;                                 ("mkv" . "mpv")
;;                                 ("mp4" . "mpv"))))
(use-package peep-dired
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file)
    (evil-define-key 'normal dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal dired-mode-map (kbd "k") 'peep-dired-prev-file))
#+end_src

* DIMINISH
Ensure :diminish functionnality
#+begin_src emacs-lisp
(use-package diminish)
#+end_src

* FONTS
** Setting Up Font Face
Defining the various fonts that Emacs will use.
#+begin_src emacs-lisp
(set-face-attribute 'default nil
                    :font "FiraCode Nerd Font"
                    :weight 'regular)
(set-face-attribute 'variable-pitch nil
                    :font "FiraCode Nerd Font"
                    :weight 'medium)
(set-face-attribute 'fixed-pitch nil
                    :font "FiraCode Nerd Font"
                    :weight 'regular)
;; Make commented text italic.
(set-face-attribute 'font-lock-comment-face nil
                    :slant 'italic)
(set-face-attribute 'font-lock-keyword-face nil
                    :slant 'italic)
;; Does the same thing as 'set-face-attribute default' but for other emacs instance (non-client)
;; (add-to-list 'default-frame-alist '(font . "FiraCode Nerd Font-13"))

;; Ajusting line spacing.
(setq-default line-spacing 0.12)
#+end_src

** Enable FiraCode Ligatures
#+begin_src emacs-lisp
(let ((alist '((33 . ".\\(?:\\(?:==\\|!!\\)\\|[!=]\\)")
               (35 . ".\\(?:###\\|##\\|_(\\|[#(?[_{]\\)")
               (36 . ".\\(?:>\\)")
               (37 . ".\\(?:\\(?:%%\\)\\|%\\)")
               (38 . ".\\(?:\\(?:&&\\)\\|&\\)")
               (42 . ".\\(?:\\(?:\\*\\*/\\)\\|\\(?:\\*[*/]\\)\\|[*/>]\\)")
               (43 . ".\\(?:\\(?:\\+\\+\\)\\|[+>]\\)")
               (45 . ".\\(?:\\(?:-[>-]\\|<<\\|>>\\)\\|[<>}~-]\\)")
               (46 . ".\\(?:\\(?:\\.[.<]\\)\\|[.=-]\\)")
               (47 . ".\\(?:\\(?:\\*\\*\\|//\\|==\\)\\|[*/=>]\\)")
               (48 . ".\\(?:x[a-zA-Z]\\)")
               (58 . ".\\(?:::\\|[:=]\\)")
               (59 . ".\\(?:;;\\|;\\)")
               (60 . ".\\(?:\\(?:!--\\)\\|\\(?:~~\\|->\\|\\$>\\|\\*>\\|\\+>\\|--\\|<[<=-]\\|=[<=>]\\||>\\)\\|[*$+~/<=>|-]\\)")
               (61 . ".\\(?:\\(?:/=\\|:=\\|<<\\|=[=>]\\|>>\\)\\|[<=>~]\\)")
               (62 . ".\\(?:\\(?:=>\\|>[=>-]\\)\\|[=>-]\\)")
               (63 . ".\\(?:\\(\\?\\?\\)\\|[:=?]\\)")
               (91 . ".\\(?:]\\)")
               (92 . ".\\(?:\\(?:\\\\\\\\\\)\\|\\\\\\)")
               (94 . ".\\(?:=\\)")
               (119 . ".\\(?:ww\\)")
               (123 . ".\\(?:-\\)")
               (124 . ".\\(?:\\(?:|[=|]\\)\\|[=>|]\\)")
               (126 . ".\\(?:~>\\|~~\\|[>=@~-]\\)")
               )
             ))

  (dolist (char-regexp alist)
    (set-char-table-range composition-function-table (car char-regexp)
                          `([,(cdr char-regexp) 0 font-shape-gstring]))))
#+end_src

** Zooming In/Out
Change bindings for zooming in/out.
#+begin_src emacs-lisp
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+end_src

* GIT-BLAME
#+begin_src emacs-lisp
(use-package blamer
  :custom
    (blamer-idle-time 0.3)
    (blamer-min-offset 70)
  :config
    (global-blamer-mode 1)
    (setq blamer-author-formatter "  ✎ %s ")
    (setq blamer-datetime-formatter "[%s]")
    (setq blamer-commit-formatter " ● %s")
    (setq blamer-prettify-time-p t)
    (setq blamer-type 'both)
    (setq blamer-uncommitted-changes-message "NO COMMITTED"))
#+end_src

* GIT-GUTTER
#+begin_src emacs-lisp
(use-package git-gutter
  :hook (prog-mode . git-gutter-mode)
  :config
    (setq git-gutter:update-interval 0.02))

(use-package git-gutter-fringe
  :config
    (define-fringe-bitmap 'git-gutter-fr:added [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:modified [224] nil nil '(center repeated))
    (define-fringe-bitmap 'git-gutter-fr:deleted [128 192 224 240] nil nil 'bottom))
#+end_src

* HIDE/SHOW MINOR MODE
hs-minor-mode enabling to have code folding in every code files
#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'hs-minor-mode)
#+end_src

* GRAPHICAL USER INTERFACE TWEAKS
Make Emacs look better.

** Disabling Menubar, Toolbar and Scrollbar
#+begin_src emacs-lisp
;;(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+end_src

** Display Line Numbers and Truncate Lines
#+begin_src emacs-lisp
(global-display-line-numbers-mode 1)
(global-visual-line-mode t)
#+end_src

** Setting up Monokai theme
#+begin_src emacs-lisp
(use-package monokai-theme
  :config
  (load-theme 'monokai t))
#+end_src

** Rainbow Parenthesis
#+begin_src emacs-lisp
#+end_src

* IVY (COUNSEL)
Ivy is a generic completion mechanism for Emacs.
Counsel is a collection of common Emacs commands enhanced with Ivy.

#+begin_src emacs-lisp
(use-package counsel
  :after ivy
  :config (counsel-mode))

(use-package ivy
  :bind
  (("C-c C-r" . ivy-resume)
   ("C-x B" . ivy-switch-buffer-other-window))
  :custom
  (setq ivy-use-virtualbuffers t)
  (setq ivy-count-format "(%d/%d) ")
  (setq enable-recursive-minibuffers t)
  :config
  (ivy-mode))

(use-package all-the-icons-ivy-rich
  :ensure t
  :init (all-the-icons-ivy-rich-mode 1))

(use-package ivy-rich
  :after ivy
  :ensure t
  :init (ivy-rich-mode 1)
  :custom
  (ivy-virtual-abreviate 'full
                         ivy-rich-switch-buffer-align-virtual-buffer t
                         ivy-rich-path-style 'abbrev)
  :config
  (ivy-set-display-transformer 'ivy-switch-buffer
                               'ivy-rich-switch-buffer-transformer))
#+end_src

* MAC SPECIFIC OPTIONS
#+begin_src emacs-lisp
(setq mac-option-key-is-meta nil
      mac-command-key-is-meta t
      mac-command-modifier 'meta
      mac-option-modifier 'none)
#+end_src

* MAGIT
#+begin_src emacs-lisp
(use-package magit)
#+end_src

* MODELINE
Bottom status bar customization.
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
    (setq doom-modeline-height 35
          doom-modeline-width 5
          doom-modeline-persp-name t
          doom-modeline-persp-icon t))
#+end_src

* NEOTREE
File tree viewer.
#+begin_src emacs-lisp
(use-package neotree
  :config
    (setq neo-smart-open t
          neo-show-hidden-files t
          neo-window-width 55
          neo-window-fixed-size nil
          inhibit-compacting-font-caches t
          projectile-switch-project-action 'neotree-projectile-action)
    (add-hook 'neo-after-create-hook
       #'(lambda (_)
           (with-current-buffer (get-buffer neo-buffer-name)
             (setq truncate-lines t)
             (setq word-wrap nil)
             (make-local-variable 'auto-hscroll-mode)
             (setq auto-hscroll-mode nil)))))
#+end_src

* ORG MODE
** Enabling Table of Content
#+begin_src emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enable Org Bullets
Org-bullets give more appealing look

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Disable Electric Indent
#+begin_src emacs-lisp
(electric-indent-mode 1)
(setq org-edit-src-content-indentation 0)
#+end_src

** Enable Org Tempo
Org-tempo enable snipets to insert blocks into org document (such as src, comment, example, ...)
#+begin_src emacs-lisp
(require 'org-tempo)
#+end_src

** Enable Org Auto-Tangle
Add ":tangle <FILE>" to your Org file properties and append "#+auto_tangle: t" to it's headers
to automatically tangle the scripts blocks to the desired file when saving.
#+begin_src emacs-lisp
(use-package org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
  :config
    (setq org-auto-tangle-default t))
#+end_src

* PROJECTILE
Projectile is a project interraction library for Emacs.
#+begin_src emacs-lisp
(use-package projectile
  :config
  (projectile-mode 1))
#+end_src

* RAINBOW MODE
Adding color to background of color tags (such as #ffffff).
#+begin_src emacs-lisp
(use-package rainbow-mode
  :hook 
  ((org-mode prog-mode) . rainbow-mode))
#+end_src

* RAINBOW DELIMITERS
Adding colors to delimiters such as () or {}
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

* RELOAD EMACS
Simple custom function that is used to reload Emacs manually without having to close it.
#+begin_src emacs-lisp
;; (defun reload-init-file ()
;;   (interactive)
;;   (load-file user-init-file)
;;   (load-file user-init-file))
#+end_src

* RESTCLIENT
Allow Emacs to test REST APIs from plain text (see restclient_example file)
#+begin_src emacs-lisp
(use-package restclient
  :config
    (restclient-mode))
#+end_src

* SHELLS AND TERMINALS
** Eshell
Emacs 'shell' written in Elisp.
#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

(setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src
** Vterm
Terminal emulator for Emacs.
#+begin_src emacs-lisp
(use-package vterm
  :config
  (setq shell-file-name "/bin/sh"
	vterm-max-scrollback 5000))
#+end_src

** Vterm-Toggle
Toggle between vterm buffer and others
#+begin_src emacs-lisp
(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                   (let ((buffer (get-buffer buffer-or-name)))
                     (with-current-buffer buffer
                       (or (equal major-mode 'vterm-mode)
                           (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                 (display-buffer-reuse-window display-buffer-at-bottom)
                 ;;(display-buffer-reuse-window display-buffer-in-direction)
                 ;;(direction . bottom)
                 ;;(dedicated . t)
                 (reusable-frames . visible)
                 (window-height . 0.3))))
#+end_src

* SUDO EDIT
sudo-edit allow to open file with sudo or switch to sudo privilege to save file initially not opened with such privileges.
#+begin_src emacs-lisp
(use-package sudo-edit
  :config
  (rr/leader-keys
    "fu" '(sudo-edit-find-file :wk "Sudo find file")
    "fU" '(sudo-edit :wk "Sudo edit file")))
#+end_src

* WHICH-KEY
#+begin_src emacs-lisp
(use-package which-key
  :init
  (which-key-mode 1)
  (setq which-key-side-window-location 'bottom
        which-key-sort-order #'which-key-key-order-alpha
        which-key-sort-uppercase-first nil
        which-key-add-column-padding 1
        which-key-max-display-columns nil
        which-key-min-display-lines 6
        which-key-side-window-slot -10
        which-key-idle-delay 0.8
        which-key-max-description-length 25
        which-key-allow-imprecise-window-fit t
        which-key-separator " -> " ))
#+end_src
